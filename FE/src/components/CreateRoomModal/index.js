import React, { useState } from 'react';
import { X, Lock, Unlock, Users, FileText, Settings, AlertCircle, Trophy } from 'lucide-react';
import { roomService } from '../../services/roomService';
import './styles.css';

const CreateRoomModal = ({ isOpen, onClose, onRoomCreated }) => {
  const [formData, setFormData] = useState({
    name: '',
    round: 5,
    maxPlayers: 6,
    currentPlayers: 0,
    status: 'WAITING',
    gameMode: 'classic',
    map: 'dungeon',
    password: ''
  });
  
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'number' ? parseInt(value) || 0 : value
    }));
  };

  const validateForm = () => {
    if (!formData.name.trim()) {
      return 'T√™n ph√≤ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng';
    }
    if (formData.name.length < 3) {
      return 'T√™n ph√≤ng ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±';
    }
    if (formData.maxPlayers < 2 || formData.maxPlayers > 10) {
      return 'S·ªë ng∆∞·ªùi ch∆°i ph·∫£i t·ª´ 2 ƒë·∫øn 10';
    }
    if (formData.password && formData.password.length < 4) {
      return 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 4 k√Ω t·ª±';
    }
    if (formData.round < 1 || formData.round > 20) {
      return 'S·ªë v√≤ng ch∆°i ph·∫£i t·ª´ 1 ƒë·∫øn 20';
    }
    return '';
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    const validationError = validateForm();
    if (validationError) {
      setError(validationError);
      return;
    }

    setLoading(true);
    setError('');

    try {
      // Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i l√™n server theo format RoomRequest c·ªßa backend
      const roomRequest = {
        name: formData.name.trim(),
        round: formData.round,
        maxPlayers: formData.maxPlayers,
        currentPlayers: 0, // M·ªõi t·∫°o n√™n l√† 0
        status: 'WAITING', // Status ban ƒë·∫ßu
        gameMode: formData.gameMode,
        map: formData.map,
        password: formData.password.trim() || null, // Null n·∫øu kh√¥ng c√≥ password
        // createdBy v√† createdAt s·∫Ω ƒë∆∞·ª£c backend t·ª± ƒë·ªông set
        // card v√† player s·∫Ω ƒë∆∞·ª£c kh·ªüi t·∫°o r·ªóng ho·∫∑c backend handle
      };

      const result = await roomService.createRoom(roomRequest);
      
      if (result.success) {
        // Th√†nh c√¥ng - reset form v√† ƒë√≥ng modal
        setFormData({
          name: '',
          round: 5,
          maxPlayers: 6,
          currentPlayers: 0,
          status: 'WAITING',
          gameMode: 'classic',
          map: 'dungeon',
          password: ''
        });
        
        if (onRoomCreated) {
          onRoomCreated(result.data);
        }
        
        onClose();
      } else {
        setError(result.message || 'Kh√¥ng th·ªÉ t·∫°o ph√≤ng. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    } catch (error) {
      console.error('Error creating room:', error);
      setError('C√≥ l·ªói x·∫£y ra khi t·∫°o ph√≤ng. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    if (!loading) {
      setError('');
      onClose();
    }
  };

  if (!isOpen) return null;

  return (
    <div className="modal-overlay" onClick={handleClose}>
      <div className="modal-content create-room-modal" onClick={e => e.stopPropagation()}>
        <div className="modal-header">
          <h2>T·∫°o ph√≤ng m·ªõi</h2>
          <button 
            className="close-btn" 
            onClick={handleClose}
            disabled={loading}
          >
            <X size={20} />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="create-room-form">
          {error && (
            <div className="error-message">
              <AlertCircle size={16} />
              <span>{error}</span>
            </div>
          )}

          {/* Basic Info */}
          <div className="form-section">
            <h3>Th√¥ng tin c∆° b·∫£n</h3>
            
            <div className="form-group">
              <label htmlFor="name">
                <FileText size={16} />
                T√™n ph√≤ng *
              </label>
              <input
                id="name"
                type="text"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                placeholder="Nh·∫≠p t√™n ph√≤ng..."
                maxLength={50}
                disabled={loading}
                required
              />
            </div>

            <div className="form-row">
              <div className="form-group">
                <label htmlFor="maxPlayers">
                  <Users size={16} />
                  S·ªë ng∆∞·ªùi ch∆°i t·ªëi ƒëa
                </label>
                <select
                  id="maxPlayers"
                  name="maxPlayers"
                  value={formData.maxPlayers}
                  onChange={handleInputChange}
                  disabled={loading}
                >
                  <option value={2}>2 ng∆∞·ªùi</option>
                  <option value={3}>3 ng∆∞·ªùi</option>
                  <option value={4}>4 ng∆∞·ªùi</option>
                  <option value={5}>5 ng∆∞·ªùi</option>
                  <option value={6}>6 ng∆∞·ªùi</option>
                  <option value={7}>7 ng∆∞·ªùi</option>
                  <option value={8}>8 ng∆∞·ªùi</option>
                  <option value={9}>9 ng∆∞·ªùi</option>
                  <option value={10}>10 ng∆∞·ªùi</option>
                </select>
              </div>

              <div className="form-group">
                <label htmlFor="round">
                  <Trophy size={16} />
                  S·ªë v√≤ng ch∆°i
                </label>
                <select
                  id="round"
                  name="round"
                  value={formData.round}
                  onChange={handleInputChange}
                  disabled={loading}
                >
                  <option value={3}>3 v√≤ng</option>
                  <option value={5}>5 v√≤ng</option>
                  <option value={7}>7 v√≤ng</option>
                  <option value={10}>10 v√≤ng</option>
                  <option value={15}>15 v√≤ng</option>
                  <option value={20}>20 v√≤ng</option>
                </select>
              </div>
            </div>
          </div>

          {/* Game Settings */}
          <div className="form-section">
            <h3>
              <Settings size={16} />
              C√†i ƒë·∫∑t tr√≤ ch∆°i
            </h3>
            
            <div className="form-row">
              <div className="form-group">
                <label htmlFor="gameMode">Ch·∫ø ƒë·ªô ch∆°i</label>
                <select
                  id="gameMode"
                  name="gameMode"
                  value={formData.gameMode}
                  onChange={handleInputChange}
                  disabled={loading}
                >
                  <option value="classic">üéØ Classic</option>
                  <option value="ranked">üèÜ Ranked</option>
                  <option value="custom">‚öôÔ∏è Custom</option>
                  <option value="tournament">üëë Tournament</option>
                </select>
              </div>

              <div className="form-group">
                <label htmlFor="map">B·∫£n ƒë·ªì</label>
                <select
                  id="map"
                  name="map"
                  value={formData.map}
                  onChange={handleInputChange}
                  disabled={loading}
                >
                  <option value="dungeon">üè∞ Dungeon</option>
                  <option value="arena">‚öîÔ∏è Arena</option>
                  <option value="forest">üå≤ Forest</option>
                  <option value="castle">üèØ Castle</option>
                  <option value="temple">‚õ©Ô∏è Temple</option>
                </select>
              </div>
            </div>
          </div>

          {/* Privacy Settings */}
          <div className="form-section">
            <h3>
              <Lock size={16} />
              B·∫£o m·∫≠t ph√≤ng
            </h3>
            
            <div className="form-group">
              <label htmlFor="password">
                {formData.password ? <Lock size={16} /> : <Unlock size={16} />}
                M·∫≠t kh·∫©u ph√≤ng (t√πy ch·ªçn)
              </label>
              <input
                id="password"
                type="password"
                name="password"
                value={formData.password}
                onChange={handleInputChange}
                placeholder="ƒê·ªÉ tr·ªëng n·∫øu ph√≤ng c√¥ng khai..."
                maxLength={20}
                disabled={loading}
              />
              <small style={{ color: '#6b7280', fontSize: '0.85rem', marginTop: '0.25rem', display: 'block' }}>
                {formData.password ? 'üîí Ph√≤ng ri√™ng t∆∞' : 'üåê Ph√≤ng c√¥ng khai'}
              </small>
            </div>
          </div>

          {/* Actions */}
          <div className="form-actions">
            <button 
              type="button" 
              className="btn-secondary" 
              onClick={handleClose}
              disabled={loading}
            >
              H·ªßy
            </button>
            <button 
              type="submit" 
              className="btn-primary" 
              disabled={loading}
            >
              {loading ? 'ƒêang t·∫°o...' : 'T·∫°o ph√≤ng'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default CreateRoomModal;